Test Plan for Youth Chess Tournament Participant Data Collection Project
Prepared by: Liubov Ustinova
Date: 20 May 2024

Objective:

The objective of this project is to collect lists of participants from all youth chess tournaments and enrich them with additional information from the FIDE website to gather comprehensive statistics by sex, ELO, country of origin etc..
Scope:

This test plan will cover the following areas:

    Functional Testing
        Web scraping for tournament participant data
        Enriching participant data with FIDE information
    Performance Testing
    Usability Testing
    Error Handling
    Data Validity
    Integration Testing

Tools and Technologies:

    Python (Selenium, BeautifulSoup, Pandas, Requests)
    ChromeDriver
    WebDriverManager

Test Environment:

    Operating System: Ubuntu 18.02
    Python Version: 3.8+
    Browser: Google Chrome
    WebDriverManager for automated driver management


Test Cases:
1. Functional Testing

    Verify web scraping setup
        Test ID: FT01
        Objective: Ensure that Selenium setup and driver initialization function correctly.
        Steps:
            Run the setup_driver() function.
        Expected Outcome:
            Chrome browser should open without error.
            WebDriver should be initialized correctly.

    Verify website opening
        Test ID: FT02
        Objective: Check if the target website can be opened.
        Steps:
            Execute the open_website(driver, "https://chess-results.com/TurnierSuche.aspx?lan=1") function.
        Expected Outcome:
            The target website should open in the Chrome browser.

    Verify cookies acceptance
        Test ID: FT03
        Objective: Ensure that cookies dialog is accepted if present.
        Steps:
            Execute the accept_cookies(driver) function after opening the website.
        Expected Outcome:
            Cookies dialog should be accepted, and browsing can continue.

    Check tournament search and data retrieval
        Test ID: FT04
        Objective: Verify that the tournament search and participant links are retrieved.
        Steps:
            Run the search_and_collect_data(driver, "European Youth") function.
        Expected Outcome:
            Relevant tournament links should be collected and printed.

    Verify data parsing from HTML
        Test ID: FT05
        Objective: Ensure data is correctly parsed from the HTML.
        Steps:
            Execute the parse_table(html_content) function with sample HTML content.
        Expected Outcome:
            Headers, data, and title should be extracted correctly from the HTML content.

    Verify data enrichment from FIDE site
        Test ID: FT06
        Objective: Ensure additional FIDE data is correctly fetched and added.
        Steps:
            Run the extract_info_from_html(link) function.
        Expected Outcome:
            Federation, Birth Year, Sex, FIDE Title, and World Rank should be fetched and printed.

2. Performance Testing

    Measure data scraping performance
        Test ID: PT01
        Objective: Ensure the web scraping process completes within an acceptable timeframe.
        Steps:
            Run the entire data scraping pipeline using the main() function.
        Expected Outcome:
            The process should complete without timing out.
            Measure the execution time and ensure it is within acceptable limits.

3. Usability Testing

    Verify user-friendliness of data outputs
        Test ID: UT01
        Objective: Ensure that the CS

Verify files created are organized and user-friendly.
- Steps:
1. Review the CSV files generated after running the process_url() and main() functions.
- Expected Outcome:
- CSV files should be well-formatted, with clear headers and no missing columns.
- Files should be stored in the specified directory.
4. Error Handling

    Test error handling for invalid URLs
        Test ID: EH01
        Objective: Ensure functions handle invalid URLs gracefully.
        Steps:
            Execute the get_player_html("invalid-url") function.
        Expected Outcome:
            Proper error messages should be logged.
            The program should not crash.

    Test handling of non-standard table structures
        Test ID: EH02
        Objective: Verify handling of tables with missing or extra columns.
        Steps:
            Run the parse_table(html_content) with sample HTML containing non-standard table structures.
        Expected Outcome:
            Proper error messages should be logged.
            Data should be handled in a way that does not disrupt the flow.

5. Data Validity

    Ensure data consistency
        Test ID: DV01
        Objective: Verify that the data collected is consistent and accurate.
        Steps:
            Cross-check a sample of data entries in the CSV files with the original source on the FIDE website.
        Expected Outcome:
            Data should match the source accurately.

6. Integration Testing

    Test end-to-end data collection and processing
        Test ID: IT01
        Objective: Verify the entire pipeline works from data scraping to CSV generation.
        Steps:
            Run the main() function.
        Expected Outcome:
            The process should complete without errors.
            CSV files should be generated with accurate and complete data.

